service: whatsapppush

custom:
  templatesTableName: Templates
  bucketName: whatsapppush-recipient-bucket-${self:provider.stage}
  queueName: WhatsAppMessageQueue.fifo
  notificationTaskTableName: NotificationTask
  statusLogsTableName: StatusTable
  callbackPath: notification/status

# app and org for use with dashboard.serverless.com
org: aktur
app: whatsapp

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

  # you can overwrite defaults here
  stage: prod
  region: us-east-1

  environment:
    DDB_TEMPLATES_TABLE_NAME: ${self:custom.templatesTableName}
    S3_BUCKET_NAME: ${self:custom.bucketName}
    SQS_QUEUE_URL:
      Ref: whatsAppMessageQueue
    DDB_NOTIFICATION_TASK_TABLE_NAME: ${self:custom.notificationTaskTableName}
    DDB_STATUS_LOGS_TABLE_NAME: ${self:custom.statusLogsTableName}

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": ["templatesTable", "Arn"]
        - "Fn::GetAtt": ["notificationTaskTable", "Arn"]
        - "Fn::GetAtt": ["statusLogsTable", "Arn"]
    - Effect: "Allow"
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        - "Fn::Join": ["/", ["Fn::GetAtt": ["s3recipientBucket", "Arn"], "*"]]
    - Effect: "Allow"
      Action:
        - sqs:*
      Resource:
        - "Fn::GetAtt": ["whatsAppMessageQueue", "Arn"]
  logRetentionInDays: 14

plugins:
  - serverless-aws-documentation

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  CreateTemplates:
    handler: handlers/template.createTemplates
    description: Function to handle business logic to create templates
    events:
      - http:
          path: templates
          method: post
  UpdateTemplates:
    handler: handlers/template.update
    description: Function to handle business logic to update template
    events:
      - http:
          path: templates/{user_id}/{template_id}
          method: put
  DeleteTemplates:
    handler: handlers/template.delete
    description: Function to handle business logic to delete templates
    events:
      - http:
          path: templates/{user_id}/{template_id}
          method: delete
  DetailsTemplates:
    handler: handlers/template.details
    description: Function to handle business logic to details templates
    events:
      - http:
          path: templates/{user_id}/{template_id}
          method: get
  ListTemplates:
    handler: handlers/template.list
    description: Function to handle business logic to list templates
    events:
      - http:
          path: templates/{user_id}
          method: get
  GetSignedUrl:
    handler: handlers/template.getSignedUrl
    description: Function to get s3 bucket signed url to upload the recipients file
    events:
      - http:
          path: /upload-url/{user_id}
          method: post
  CreateNotification:
    handler: handlers/notification.createNotification
    description: Function to create notification
    events:
      - http:
          path: notification
          method: post
  ListNotificationTasks:
    handler: handlers/notification.listNotificationTasks
    description: Function to list notifications
    events:
      - http:
          path: notification/{user_id}
          method: get
  NotificationProcessor:
    handler: handlers/sqs-receiver.process
    description: Process SQS messages to Twilio WhatsApp
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - whatsAppMessageQueue
              - Arn
          batchSize: 1
    environment:
      TWILIO_ACCOUNT_SID: ${param:twilioAccountSid}
      TWILIO_ACCOUNT_AUTH_TOKEN: ${param:twilioAuthToken}
      TWILIO_CALLBACK_URL:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/${self:custom.callbackPath}"
  MessageStatusCallBack:
    handler: handlers/sqs-receiver.statusCallback
    description: Twilio Callback endpoint
    events:
      - http:
          path: ${self:custom.callbackPath}
          method: post
    environment:
      DDB_STATUS_LOGS_TABLE_NAME: ${self:custom.statusLogsTableName}
  ListStatusLogs:
    handler: handlers/status.status
    description: Stage 6 status
    events:
      - http:
          path: status/{notification_id}
          method: get
  DetailsStatuslog:
    handler: handlers/status.details
    description: Stage 6 details status log
    events:
      - http:
          path: status/{notification_id}/{log_id}
          method: get
  StatusLogSummary:
    handler: handlers/status.summary
    description: summary of message delivery count by its status
    events:
      - http:
          path: status/summary/{notification_id}
          method: get

# CloudFormation resource templates here
resources:
  Resources:
    templatesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.templatesTableName}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: template_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: template_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    notificationTaskTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.notificationTaskTableName}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: notification_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: notification_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    statusLogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.statusLogsTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notification_id
            AttributeType: S
          - AttributeName: log_id
            AttributeType: S
        KeySchema:
          - AttributeName: notification_id
            KeyType: HASH
          - AttributeName: log_id
            KeyType: RANGE
    s3recipientBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - PUT
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    whatsAppMessageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}
        FifoQueue: true
        ContentBasedDeduplication: true
  Outputs:
    SQSUrl:
      Description: "SQS Url"
      Value:
        "Ref": whatsAppMessageQueue
